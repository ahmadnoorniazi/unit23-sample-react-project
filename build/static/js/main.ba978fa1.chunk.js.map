{"version":3,"sources":["logo.svg","Chat.js","Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","data","name","message","styles","overflowY","height","MyApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messages","changeMessage","bind","assertThisInitialized","event","setState","target","value","react_default","a","createElement","className","style","map","item","type","onChange","placeholder","React","Component","autoscroll","isScrolledDownThreshold","componentName","isLogedIn","password","changeName","changePassword","login","preventDefault","checked","alert","console","log","_this$state","src_Chat","onSubmit","App","Login_componentName","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba978fa1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport autoscroll from \"autoscroll-react\";\nimport './Chat.css';\n\nconst data = [{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"},{name:\"Ahmad\",message:\"how are you\"}]\nconst styles = {\n  overflowY: \"scroll\",\n  height: \"600px\"\n};\n\nclass MyApp extends React.Component {\n  constructor(props){\n    super();\n    this.state = {\n      messages:\"\"\n    }\n    this.changeMessage = this.changeMessage.bind(this);\n  }\n\n  changeMessage(event){\n    this.setState({messages:event.target.value})\n  }\n  render() {\n    return(\n      <div>\n        <div className=\"heading\">Wecome My Chat App</div>\n        <div style={styles}>\n          <ul className=\"Uol\" >\n            {data.map(item => \n            <li>\n              <div className=\"name\">{item.name}</div>\n              <div className=\"message\">{item.message}</div>\n            </li>)}\n          </ul>\n        </div>\n        <input className=\"message-field\" type=\"text\" value={this.state.messages} onChange={this.changeMessage} placeholder=\"Type your messege and hit ENTER\"/>\n      </div>\n    );\n  }\n\n}\n\nexport default autoscroll(MyApp, { isScrolledDownThreshold:10});","import React, { Component } from 'react'\nimport Chat from './Chat';\nimport './Login.css';\nexport default class componentName extends Component {\n  constructor(props){\n    super();\n    this.state = {\n      isLogedIn:false,\n      name:\"\",\n      password:\"\"\n    }\n    this.changeName = this.changeName.bind(this);\n    this.changePassword = this.changePassword.bind(this);\n    this.login = this.login.bind(this);\n  }\n  changeName(event){\n    this.setState({name:event.target.value})\n  }\n  changePassword(event){\n    this.setState({password:event.target.value})\n  }\n  login(event){\n    event.preventDefault();\n    const checked = (this.state.name === 'admin' && this.state.password === 'admin') ? true : false ;\n    if (checked){\n      this.setState({isLogedIn:!this.state.isLogedIn})\n    } else {\n      alert('incorrect UserName and password')\n    }\n    console.log(\"value is\",checked)\n\n  }\n  render() {\n    const {name,password} = this.state;\n    if (this.state.isLogedIn === true){\n      return <Chat />\n    }\n    return (\n      <div className=\"form-box\">\n        <div className=\"head\">Login</div>\n        <form onSubmit={this.login}>\n          <div className=\"form-group\">\n            <label className=\"label-control\">\n              Email\n            </label>\n            <input type=\"text\" placeholder=\"User Name\" value={name} onChange={this.changeName}/>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"label-control\">\n              Password\n            </label>\n            <input type=\"password\" placeholder=\"password\" value={password} onChange={this.changePassword}/>\n          </div>\n            <input type=\"submit\" value=\"Login\" className=\"btn\"/>\n        </form>\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chat from './Login';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}